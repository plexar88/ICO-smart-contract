#!/usr/bin/fift -s
"TonUtil.fif" include
{ .s bye } : `
{ -1 { 1+ 2dup 8 * ufits } until
  rot over 4 u, -rot 8 * u, } : Token,

{ ."usage: " @' $0 type ." <workchain_id> <owner_addr> <dest_wallet> <softcup> <utime_date_start> <utime_date_end> <token_id> <storage_fee> <bounty_percent> <stages> " cr
  ."Creates a request to upload new ICO smart contract and saves it into ico-query.boc file" cr
  ."Example: setup-smc.fif 0 kQBP3h6wrnRgnMVFWT9p_wfCPsNLtEJHQ8cwLuCxPT2UbDq- kQBtkGvKJl918FQv2yezIEMgGDHZXE7P1hN0UhrhRhZmTuLT 3000000000 1576972800 1579651200 239 3333 500000 1000 500000 1500 500000 2000 500000 2500" cr 1 halt
} : usage

$# dup 11 < ' usage if

$1 (number) drop constant wc // workchain_id
$# 7 - dup 2 mod 0<> abort"Parameters stages (tokens, price) should be odd value. Ex. 500000 3000 400000 5000 means fist stage 500000 tokens by price 3000 nanogran each"
variable idx dup idx !
variable i 1 i !
variable dict_stages dictnew dict_stages !
// fill dict by values
cr ."Stages: " cr
{
<b idx @ dup 1+ -rot $() (number) drop dup . ." - " Token, swap $() (number) drop dup . cr Gram, b> <s // push value
i @ dup 1+ i ! // push key
dict_stages @ // push dict
4 // push key size
udict! // add key val to udict
drop
dict_stages !
idx @ 2+ idx ! // inc loop counter (counter = counter + 2)
} swap 1- $# swap - 2 / times
<b 1 4 u, dict_stages @ dict, b> constant stages

$2 $>smca not abort"Error: bad owner address" drop <b 4 3 u, -rot addr, b> constant owner_addr
$3 $>smca not abort"Error: bad destination address" drop <b 4 3 u, -rot addr, b> constant dest_wallet

<b 1 1 u, 0 1 u, $5 (number) drop 32 u, $6 (number) drop 32 u, 0 1 u, b> constant flags
<b stages ref, $7 (number) drop 32 u, owner_addr ref, dest_wallet ref, $4 (number) drop Gram, 0 Gram, 0 Token, $9 (number) drop 32 u, $8 (number) drop 32 u, b> constant settings
<b dictnew dict, dictnew dict, b> constant balances
<b flags ref, settings ref, balances ref, b> constant data

"simple-ico.fif" include constant code

null constant lib // no libraries
<b b{0011} s, code ref, data ref, lib dict, b> constant state_init // create StateInit

state_init // dup ."StateInit: " <s csr. cr
dup hashu wc swap 2dup 2constant wallet_addr

."Smart contract address = " 2dup .addr cr
."Bounty percent : " $9 (number) drop . cr 
."Storage fee : " $8 (number) drop . cr 
."Currency id : " $7 (number) drop . cr 
."Softcup : " $4 (number) drop . cr 
2dup "ico.addr" save-address-verbose
."Non-bounceable address (for init): " 2dup 7 .Addr cr
."Bounceable address (for later access): " 6 .Addr cr

<b b{1000100} s, wallet_addr addr, b{000010} s, swap <s s, b{0} s, b>
// dup ."External message for initialization is " <s csr. cr
2 boc+>B // dup Bx. cr
"ico-query.boc" tuck B>file
."(Saved ICO smartcontract creating query to file " type .")" cr cr 
